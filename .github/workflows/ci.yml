name: CI

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  format-code:
    runs-on: ubuntu-latest
    name: Check Code Formatting

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y clang-format python3-pip
          pip install --upgrade cmake-format

      - name: Run Format Check
        run: |
          ./format.sh
          git diff --exit-code > /tmp/format_results.txt

      - name: Display Format Check Results
        if: always()
        run: |
          cat /tmp/format_results.txt

      - name: Upload Format Check Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: format-check-results
          path: /tmp/format_results.txt

  build-and-test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
    name: Build and Test (${{ matrix.os }}, ${{ matrix.build_type }})

    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libfabric-bin libfabric-dev openmpi-bin libopenmpi-dev

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake ninja libfabric open-mpi

      # - name: Install MPICH
      #   run: |
      #     wget https://www.mpich.org/static/downloads/4.3.1/mpich-4.3.1.tar.gz
      #     tar -xzf mpich-4.3.1.tar.gz
      #     cd mpich-4.3.1
      #     ./configure --enable-thread-cs=per-vci --disable-fortran --disable-psm --disable-psm2 --disable-rdma --disable-efa
      #     make -j4
      #     sudo make install

      - name: Verify Installation
        run: |
          cmake --version
          ninja --version
          fi_info --version
          mpicc --version
          mpirun --version

      - name: Configure CMake
        shell: bash
        run: |
          cmake -LA \
            -Bbuild \
            -GNinja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DLCW_DEBUG=ON \
            -DLCW_USE_CTEST_LAUNCHER=mpirun \
            -DLCT_PMI_BACKEND_ENABLE_MPI=ON \
            -DLCI_NETWORK_BACKENDS=ofi \
            -DLCI_USE_TCMALLOC=OFF \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            .

      - name: Build
        shell: bash
        run: |
            cmake --build build --target all

      - name: Test (with the LCI backend)
        shell: bash
        run: |
            cd build
            export LCW_BACKEND_AUTO=lci2
            ctest --extra-verbose --timeout 300 --rerun-failed --output-on-failure

      - name: Test (with the MPI backend)
        shell: bash
        run: |
            cd build
            export LCW_BACKEND_AUTO=mpi
            ctest --extra-verbose --timeout 300 --rerun-failed --output-on-failure
